---
const { audioName, author, title, image} = Astro.props

interface Props {
    audioName: string;
    author: string;
    title: string;
    image: string;
    
    }

---

<style define:vars={{ image: `url(${image})` }}>
  .album-art::before {
    background-image: var(--image);
  }
</style>

<audio
  crossorigin="anonymous"
  type?="audio/mpeg"
  loop="loop"
  preload="metadata"
  id="audio"
></audio>

<div class="player" data-audio-name={audioName}>
      <div id="info" class="info">
        <div class="info-artist">
          <span class="name">{title}</span>
        </div>
        <progress id="progress-bar" value="0" max="100"></progress>
        <span id="elapsed">0:00</span> / <span id="track-time">1:00</span>
      </div>
      <div id="control-panel" class="control-panel">
        <div class="album-art"></div>
        <div class="controls">
          <div class="prev">
            <i class="fa-solid fa-arrow-rotate-left"></i>
          </div>
          <div id="play" class="play">
            <i class="fa-solid fa-play"></i>
            <i class="fa-solid fa-pause"></i>
          </div>
          <div class="next">
            <i class="fa-solid fa-arrow-rotate-right"></i>
          </div>
        </div>
      </div>
      <div id="command" class="command">
        <i class="fa-solid fa-volume-low"></i>
        <input type="range" id="volume" value="1" min="0" max="1" step="0.1" />
      </div>
    </div>

 <script>

    const audio = document.getElementById("audio") as HTMLAudioElement | null;
    const musicPlayer = document.querySelector('.player')as HTMLElement | null;
    const audioName = musicPlayer!.dataset.audioName;
    console.log(audioName);
    
    const playBtn = document.getElementById("play");
    const prevBtn = document.querySelector(".prev");
    const nextBtn = document.querySelector(".next");
    const progressBar = document.getElementById("progress-bar") as HTMLProgressElement | null;
    const volume = document.getElementById("volume") as HTMLInputElement | null;
    const elapsed = document.getElementById("elapsed");
    const trackTime = document.getElementById("track-time");
    let duration : number = 0;
    let isPlaying = false;

    const controlPanel = document.getElementById("control-panel");
    const infoBar = document.getElementById("info");
    const commandBar = document.getElementById("command");

    // Fetch préalable pour récupérer les headers
    fetch("/api/audio/" + audioName)
    .then(async response => {
      duration = parseFloat(response.headers.get("X-Audio-Duration") ?? "0");
      console.log("Duration:", duration);
      
      // Attendre le blob
      const blob = await response.blob();
      if (audio) {
        audio.src = URL.createObjectURL(blob);
        setupTrackSlider();
      }
    })
    .catch(error => console.error("Error fetching audio duration:", error));
    
  playBtn?.addEventListener("click", ()=> play());
  prevBtn?.addEventListener("click", ()=> previous());
  nextBtn?.addEventListener("click", ()=> next());

    // Gestion du volume
  volume?.addEventListener("input", (e) => {
    volumeSetUp(e);
  });


  function volumeSetUp(e: Event) {
    const target = e.target as HTMLInputElement;
    audio && (audio.volume = parseFloat(target.value));
  };

  function previous() {
    audio!.currentTime = Math.max(0, audio!.currentTime - 15);
  }

  function next() {
    audio!.currentTime = Math.min(
      duration,
      audio!.currentTime + 15
    );
  }

  function setupTrackSlider() {
    console.log("DUR",duration);
    // progressBar!.max = duration;
    // progressBar!.value = 0;
    trackTime!.textContent = buildDuration(duration);
  }

  function buildDuration(duration_data : number) {
    let minutes = Math.floor(duration_data / 60);
    let minutesPadded = (String(minutes).padStart(2, "0"));
    let reste = duration_data % 60;
    let secondes = Math.floor(reste);
    let secondesPadded = (String(secondes).padStart(2, "0"));

     return minutesPadded + ":" + secondesPadded;
   }

  function updateProgressBar () {
    if (isPlaying) {
      const currentTime = audio!.currentTime; // - startTime;
      const progress = (currentTime / duration) * 100;
      
      elapsed!.textContent = buildDuration(audio!.currentTime);
      progressBar!.value = progress;
      
      if(currentTime < duration) {
          requestAnimationFrame(updateProgressBar);
      }
    }
  };

   function play() {
    
     [controlPanel, infoBar, commandBar].forEach((element) => {
       element!.classList.toggle("active");
     });

     if (infoBar!.classList.contains("active")) {
       audio!.play();
       audio!.volume = parseInt(volume!.value);
       isPlaying = true;
       
      updateProgressBar();

     } else {
       audio!.pause();
       isPlaying= false;
     }
   }

 </script>